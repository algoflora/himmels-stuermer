# syntax=docker/dockerfile:1.3

FROM amazonlinux:2023 as builder

ARG GRAALVM_VERSION=23
ARG TARGET_ARCH=arm64
ARG TARGET_ARCH_2=aarch64
ARG AUX_PACKAGES=""
ARG PROJECT_NAME="app"

# Install necessary packages

RUN dnf install -y \
    bash \
    gzip \
    tar \
    gcc \
    glibc-devel \
    git \
    readline-devel \
    autoconf \
    zlib-devel \
    libstdc++-static \
    binutils \
    xz \
    ${AUX_PACKAGES}

RUN dnf clean all


# Install GraalVM

RUN curl -Lo /graalvm.tar.gz "https://download.oracle.com/graalvm/${GRAALVM_VERSION}/latest/graalvm-jdk-${GRAALVM_VERSION}_linux-${TARGET_ARCH_2}_bin.tar.gz"
RUN mkdir /graalvm
RUN tar -xzvf /graalvm.tar.gz -C /graalvm --strip-components=1
ENV JAVA_HOME=/graalvm
ENV PATH="/graalvm/bin:$PATH"

# Install UPX

RUN curl -Lo /upx.tar.xz "https://github.com/upx/upx/releases/download/v4.2.4/upx-4.2.4-${TARGET_ARCH}_linux.tar.xz"
RUN tar -xvf /upx.tar.xz

# Install Leiningen

RUN curl -Lo /lein https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein
RUN mv /lein /usr/bin/
RUN chmod +x /usr/bin/lein
RUN lein

# Copy project

COPY . "/$PROJECT_NAME"
WORKDIR "/$PROJECT_NAME"

# Simple test

ENV HIMMELSSTUERMER_PROFILE=test
RUN --mount=type=cache,target=/root/.m2 java -jar ./test/resources/dynamodb/DynamoDBLocal.jar -inMemory & \
    sleep 3 && lein test

# Native image test

RUN lein clean
RUN --mount=type=cache,target=/root/.m2 lein with-profiles +test,+uber-test,+native native-image
RUN cp -r ./.himmelsstuermer.build/. ./target/test+uber-test+native/
RUN java -jar ./test/resources/dynamodb/DynamoDBLocal.jar -inMemory & \
    sleep 5 && ./target/test+uber-test+native/lambda

# Native image build

ENV HIMMELSSTUERMER_PROFILE=aws
RUN lein clean
RUN --mount=type=cache,target=/root/.m2 lein with-profiles +uber,+native native-image
RUN mkdir /result
RUN cp ./target/uber+native/lambda /result/lambda
RUN cp -r ./.himmelsstuermer.build/. /result

# Compress executable

WORKDIR /result
RUN strip ./lambda
RUN /upx-4.2.4-${TARGET_ARCH}_linux/upx ./lambda
RUN ls -lah

FROM public.ecr.aws/lambda/provided:latest

ENV AWS_LAMBDA_RUNTIME_API "NO DATA"

ARG AUX_PACKAGES

RUN if [ -n "$AUX_PACKAGES" ]; then \
        dnf install -y $AUX_PACKAGES; \
    fi
RUN dnf clean all

ENV HIMMELSSTUERMER_PROFILE=aws
COPY --from=builder /result/. /var/runtime
RUN ls -lah /var/runtime

# Ensure the executable has the right permissions
RUN chmod +x /var/runtime/lambda

ENTRYPOINT [ "/var/runtime/lambda" ]
